"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const history = require("@tanstack/history");
const invariant = require("tiny-invariant");
const warning = require("tiny-warning");
const awaited = require("./awaited.cjs");
const defer = require("./defer.cjs");
const CatchBoundary = require("./CatchBoundary.cjs");
const fileRoute = require("./fileRoute.cjs");
const lazyRouteComponent = require("./lazyRouteComponent.cjs");
const link = require("./link.cjs");
const Matches = require("./Matches.cjs");
const path = require("./path.cjs");
const qss = require("./qss.cjs");
const redirects = require("./redirects.cjs");
const route = require("./route.cjs");
const router = require("./router.cjs");
const RouterProvider = require("./RouterProvider.cjs");
const scrollRestoration = require("./scroll-restoration.cjs");
const searchParams = require("./searchParams.cjs");
const useBlocker = require("./useBlocker.cjs");
const useNavigate = require("./useNavigate.cjs");
const useParams = require("./useParams.cjs");
const useSearch = require("./useSearch.cjs");
const routerContext = require("./routerContext.cjs");
const useRouteContext = require("./useRouteContext.cjs");
const useRouter = require("./useRouter.cjs");
const useRouterState = require("./useRouterState.cjs");
const utils = require("./utils.cjs");
const notFound = require("./not-found.cjs");
exports.invariant = invariant;
exports.warning = warning;
exports.Await = awaited.Await;
exports.useAwaited = awaited.useAwaited;
exports.defer = defer.defer;
exports.isDehydratedDeferred = defer.isDehydratedDeferred;
exports.CatchBoundary = CatchBoundary.CatchBoundary;
exports.CatchBoundaryImpl = CatchBoundary.CatchBoundaryImpl;
exports.ErrorComponent = CatchBoundary.ErrorComponent;
exports.FileRoute = fileRoute.FileRoute;
exports.FileRouteLoader = fileRoute.FileRouteLoader;
exports.LazyRoute = fileRoute.LazyRoute;
exports.createFileRoute = fileRoute.createFileRoute;
exports.createLazyFileRoute = fileRoute.createLazyFileRoute;
exports.createLazyRoute = fileRoute.createLazyRoute;
exports.lazyRouteComponent = lazyRouteComponent.lazyRouteComponent;
exports.Link = link.Link;
exports.createLink = link.createLink;
exports.useLinkProps = link.useLinkProps;
exports.Match = Matches.Match;
exports.MatchRoute = Matches.MatchRoute;
exports.Matches = Matches.Matches;
exports.Outlet = Matches.Outlet;
exports.defaultDeserializeError = Matches.defaultDeserializeError;
exports.getRenderedMatches = Matches.getRenderedMatches;
exports.isServerSideError = Matches.isServerSideError;
exports.matchContext = Matches.matchContext;
exports.useChildMatches = Matches.useChildMatches;
exports.useLoaderData = Matches.useLoaderData;
exports.useLoaderDeps = Matches.useLoaderDeps;
exports.useMatch = Matches.useMatch;
exports.useMatchRoute = Matches.useMatchRoute;
exports.useMatches = Matches.useMatches;
exports.useParentMatches = Matches.useParentMatches;
exports.cleanPath = path.cleanPath;
exports.interpolatePath = path.interpolatePath;
exports.joinPaths = path.joinPaths;
exports.matchByPath = path.matchByPath;
exports.matchPathname = path.matchPathname;
exports.parsePathname = path.parsePathname;
exports.removeBasepath = path.removeBasepath;
exports.resolvePath = path.resolvePath;
exports.trimPath = path.trimPath;
exports.trimPathLeft = path.trimPathLeft;
exports.trimPathRight = path.trimPathRight;
exports.decode = qss.decode;
exports.encode = qss.encode;
exports.isRedirect = redirects.isRedirect;
exports.redirect = redirects.redirect;
exports.NotFoundRoute = route.NotFoundRoute;
exports.RootRoute = route.RootRoute;
exports.Route = route.Route;
exports.RouteApi = route.RouteApi;
exports.createRootRoute = route.createRootRoute;
exports.createRootRouteWithContext = route.createRootRouteWithContext;
exports.createRoute = route.createRoute;
exports.createRouteMask = route.createRouteMask;
exports.getRouteApi = route.getRouteApi;
exports.rootRouteId = route.rootRouteId;
exports.rootRouteWithContext = route.rootRouteWithContext;
exports.PathParamError = router.PathParamError;
exports.Router = router.Router;
exports.SearchParamError = router.SearchParamError;
exports.componentTypes = router.componentTypes;
exports.createRouter = router.createRouter;
exports.defaultSerializeError = router.defaultSerializeError;
exports.getInitialRouterState = router.getInitialRouterState;
exports.lazyFn = router.lazyFn;
exports.RouterProvider = RouterProvider.RouterProvider;
exports.getRouteMatch = RouterProvider.getRouteMatch;
exports.ScrollRestoration = scrollRestoration.ScrollRestoration;
exports.useElementScrollRestoration = scrollRestoration.useElementScrollRestoration;
exports.useScrollRestoration = scrollRestoration.useScrollRestoration;
exports.defaultParseSearch = searchParams.defaultParseSearch;
exports.defaultStringifySearch = searchParams.defaultStringifySearch;
exports.parseSearchWith = searchParams.parseSearchWith;
exports.stringifySearchWith = searchParams.stringifySearchWith;
exports.Block = useBlocker.Block;
exports.useBlocker = useBlocker.useBlocker;
exports.Navigate = useNavigate.Navigate;
exports.useNavigate = useNavigate.useNavigate;
exports.useParams = useParams.useParams;
exports.useSearch = useSearch.useSearch;
exports.getRouterContext = routerContext.getRouterContext;
exports.useRouteContext = useRouteContext.useRouteContext;
exports.useRouter = useRouter.useRouter;
exports.useRouterState = useRouterState.useRouterState;
exports.deepEqual = utils.deepEqual;
exports.escapeJSON = utils.escapeJSON;
exports.functionalUpdate = utils.functionalUpdate;
exports.isPlainArray = utils.isPlainArray;
exports.isPlainObject = utils.isPlainObject;
exports.isServer = utils.isServer;
exports.last = utils.last;
exports.pick = utils.pick;
exports.replaceEqualDeep = utils.replaceEqualDeep;
exports.shallow = utils.shallow;
exports.useLayoutEffect = utils.useLayoutEffect;
exports.useStableCallback = utils.useStableCallback;
exports.CatchNotFound = notFound.CatchNotFound;
exports.DefaultGlobalNotFound = notFound.DefaultGlobalNotFound;
exports.isNotFound = notFound.isNotFound;
exports.notFound = notFound.notFound;
Object.keys(history).forEach((k) => {
  if (k !== "default" && !Object.prototype.hasOwnProperty.call(exports, k))
    Object.defineProperty(exports, k, {
      enumerable: true,
      get: () => history[k]
    });
});
//# sourceMappingURL=index.cjs.map
