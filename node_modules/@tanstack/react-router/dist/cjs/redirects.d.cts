import { PickAsRequired } from '.';
import { NavigateOptions } from './link.cjs';
import { AnyRoute } from './route.cjs';
import { RoutePaths } from './routeInfo.cjs';
import { RegisteredRouter } from './router.cjs';
export type AnyRedirect = Redirect<any, any, any, any, any>;
export type Redirect<TRouteTree extends AnyRoute = RegisteredRouter['routeTree'], TFrom extends RoutePaths<TRouteTree> = '/', TTo extends string = '', TMaskFrom extends RoutePaths<TRouteTree> = TFrom, TMaskTo extends string = ''> = {
    /**
     * @deprecated Use `statusCode` instead
     **/
    href?: string;
    code?: number;
    statusCode?: number;
    throw?: any;
    headers?: HeadersInit;
} & NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>;
export type ResolvedRedirect<TRouteTree extends AnyRoute = RegisteredRouter['routeTree'], TFrom extends RoutePaths<TRouteTree> = '/', TTo extends string = '', TMaskFrom extends RoutePaths<TRouteTree> = TFrom, TMaskTo extends string = ''> = PickAsRequired<Redirect<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>, 'code' | 'statusCode' | 'href' | 'headers'>;
export declare function redirect<TRouteTree extends AnyRoute = RegisteredRouter['routeTree'], TFrom extends RoutePaths<TRouteTree> = '/', TTo extends string = '', TMaskFrom extends RoutePaths<TRouteTree> = TFrom, TMaskTo extends string = ''>(opts: Redirect<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>): Redirect<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>;
export declare function isRedirect(obj: any): obj is AnyRedirect;
