import * as React from 'react';
import { NavigateOptions, ToOptions } from './link.cjs';
import { ParsedLocation } from './location.cjs';
import { AnyRoute } from './route.cjs';
import { RoutePaths } from './routeInfo.cjs';
import { RegisteredRouter, Router, RouterOptions, RouterState } from './router.cjs';
import { RouteMatch } from './Matches.cjs';
export interface CommitLocationOptions {
    replace?: boolean;
    resetScroll?: boolean;
    startTransition?: boolean;
}
export interface MatchLocation {
    to?: string | number | null;
    fuzzy?: boolean;
    caseSensitive?: boolean;
    from?: string;
}
export type NavigateFn = <TTo extends string, TRouteTree extends AnyRoute = RegisteredRouter['routeTree'], TFrom extends RoutePaths<TRouteTree> | string = string, TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom, TMaskTo extends string = ''>(opts: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>) => Promise<void>;
export type BuildLocationFn<TRouteTree extends AnyRoute> = <TTo extends string, TFrom extends RoutePaths<TRouteTree> | string = string, TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom, TMaskTo extends string = ''>(opts: ToOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo> & {
    leaveParams?: boolean;
}) => ParsedLocation;
export type InjectedHtmlEntry = string | (() => Promise<string> | string);
export declare function RouterProvider<TRouteTree extends AnyRoute = RegisteredRouter['routeTree'], TDehydrated extends Record<string, any> = Record<string, any>>({ router, ...rest }: RouterProps<TRouteTree, TDehydrated>): React.JSX.Element;
export declare function getRouteMatch<TRouteTree extends AnyRoute>(state: RouterState<TRouteTree>, id: string): undefined | RouteMatch<TRouteTree>;
export type RouterProps<TRouteTree extends AnyRoute = RegisteredRouter['routeTree'], TDehydrated extends Record<string, any> = Record<string, any>> = Omit<RouterOptions<TRouteTree, TDehydrated>, 'context'> & {
    router: Router<TRouteTree>;
    context?: Partial<RouterOptions<TRouteTree, TDehydrated>['context']>;
};
