{"version":3,"file":"config.cjs","sources":["../../src/config.ts"],"sourcesContent":["import path from 'path'\nimport { readFileSync, existsSync } from 'fs'\nimport { z } from 'zod'\n\nexport const configSchema = z.object({\n  routeFilePrefix: z.string().optional(),\n  routeFileIgnorePrefix: z.string().optional().default('-'),\n  routeFileIgnorePattern: z.string().optional(),\n  routesDirectory: z.string().optional().default('./src/routes'),\n  generatedRouteTree: z.string().optional().default('./src/routeTree.gen.ts'),\n  quoteStyle: z.enum(['single', 'double']).optional().default('single'),\n  disableTypes: z.boolean().optional().default(false),\n  addExtensions: z.boolean().optional().default(false),\n  disableLogging: z.boolean().optional().default(false),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport async function getConfig(\n  inlineConfig: Partial<Config> = {},\n  configDirectory?: string,\n): Promise<Config> {\n  if (configDirectory === undefined) {\n    configDirectory = process.cwd()\n  }\n  const configFilePathJson = path.resolve(configDirectory, 'tsr.config.json')\n  const exists = existsSync(configFilePathJson)\n\n  let config: Config\n\n  if (exists) {\n    config = configSchema.parse({\n      ...JSON.parse(readFileSync(configFilePathJson, 'utf-8')),\n      ...inlineConfig,\n    })\n  } else {\n    config = configSchema.parse(inlineConfig)\n  }\n\n  // If typescript is disabled, make sure the generated route tree is a .js file\n  if (config.disableTypes) {\n    config.generatedRouteTree = config.generatedRouteTree.replace(\n      /\\.(ts|tsx)$/,\n      '.js',\n    )\n  }\n\n  return config\n}\n"],"names":["z","existsSync","readFileSync"],"mappings":";;;;;AAIa,MAAA,eAAeA,MAAE,OAAO;AAAA,EACnC,iBAAiBA,IAAA,EAAE,OAAO,EAAE,SAAS;AAAA,EACrC,uBAAuBA,IAAE,EAAA,OAAA,EAAS,SAAS,EAAE,QAAQ,GAAG;AAAA,EACxD,wBAAwBA,IAAA,EAAE,OAAO,EAAE,SAAS;AAAA,EAC5C,iBAAiBA,IAAE,EAAA,OAAA,EAAS,SAAS,EAAE,QAAQ,cAAc;AAAA,EAC7D,oBAAoBA,IAAE,EAAA,OAAA,EAAS,SAAS,EAAE,QAAQ,wBAAwB;AAAA,EAC1E,YAAYA,IAAAA,EAAE,KAAK,CAAC,UAAU,QAAQ,CAAC,EAAE,SAAA,EAAW,QAAQ,QAAQ;AAAA,EACpE,cAAcA,IAAE,EAAA,QAAA,EAAU,SAAS,EAAE,QAAQ,KAAK;AAAA,EAClD,eAAeA,IAAE,EAAA,QAAA,EAAU,SAAS,EAAE,QAAQ,KAAK;AAAA,EACnD,gBAAgBA,IAAE,EAAA,QAAA,EAAU,SAAS,EAAE,QAAQ,KAAK;AACtD,CAAC;AAID,eAAsB,UACpB,eAAgC,CAAC,GACjC,iBACiB;AACjB,MAAI,oBAAoB,QAAW;AACjC,sBAAkB,QAAQ;EAC5B;AACA,QAAM,qBAAqB,KAAK,QAAQ,iBAAiB,iBAAiB;AACpE,QAAA,SAASC,cAAW,kBAAkB;AAExC,MAAA;AAEJ,MAAI,QAAQ;AACV,aAAS,aAAa,MAAM;AAAA,MAC1B,GAAG,KAAK,MAAMC,GAAa,aAAA,oBAAoB,OAAO,CAAC;AAAA,MACvD,GAAG;AAAA,IAAA,CACJ;AAAA,EAAA,OACI;AACI,aAAA,aAAa,MAAM,YAAY;AAAA,EAC1C;AAGA,MAAI,OAAO,cAAc;AAChB,WAAA,qBAAqB,OAAO,mBAAmB;AAAA,MACpD;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AAEO,SAAA;AACT;;;"}