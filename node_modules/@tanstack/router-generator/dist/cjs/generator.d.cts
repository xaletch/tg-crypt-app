import { Config } from './config.cjs';
export declare const rootPathId = "__root";
export type RouteNode = {
    filePath: string;
    fullPath: string;
    variableName: string;
    routePath?: string;
    cleanedPath?: string;
    path?: string;
    isNonPath?: boolean;
    isNonLayout?: boolean;
    isLayout?: boolean;
    isVirtualParentRequired?: boolean;
    isVirtualParentRoute?: boolean;
    isRoute?: boolean;
    isLoader?: boolean;
    isComponent?: boolean;
    isErrorComponent?: boolean;
    isPendingComponent?: boolean;
    isVirtual?: boolean;
    isLazy?: boolean;
    isRoot?: boolean;
    children?: RouteNode[];
    parent?: RouteNode;
};
export declare function generator(config: Config): Promise<void>;
export declare function removeExt(d: string, keepExtension?: boolean): string;
export declare function multiSortBy<T>(arr: T[], accessors?: ((item: T) => any)[]): T[];
/**
 * Removes the last segment from a given path. Segments are considered to be separated by a '/'.
 *
 * @param {string} path - The path from which to remove the last segment. Defaults to '/'.
 * @returns {string} The path with the last segment removed.
 * @example
 * removeLastSegmentFromPath('/workspace/_auth/foo') // '/workspace/_auth'
 */
export declare function removeLastSegmentFromPath(path?: string): string;
export declare function hasParentRoute(routes: RouteNode[], node: RouteNode, routePathToCheck: string | undefined): RouteNode | null;
